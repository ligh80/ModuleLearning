apt install git     //安装git
---------------------------------------------------------------------------
ssh-keygen -t ed25519 -C “xxxxxxxxxx@163.com”   //因为git和 GitHub之间是通过ssh加密传输的，因此需要配置公钥，需要先生成公私密钥。
cat /root/.ssh/id_ed25519.pub //复制生产的密钥到github仓库SSH的key库中，注意ssh-keygen指令存放.pub的地址
ssh -T git@github.com   //查看能否通信成功

git config --global user.name "<用户名>"    //设置用户名
git config --global user.email "<电子邮件>" //设置电子邮箱
git config --list   //查看是否设置成功
---------------------------------------------------------------------------
git init    //本地本地仓库
---------------------------------------------------------------------------
分支管理
初始化本地分支：需要commit才能创建默认本地分支：master

git fetch   //将远程仓库更新至本地，保证本地存储的远程仓库是最新状态
git branch -a   //查看所有分支列表（包括本地和远程，remotes/开头的表示远程分支）；列出本地已经存在的分支，并且当前分支会用*标记
git checkout 分支名称   //切换本地分支
git checkout -b xxx    //新建分支
git branch -vv    //查看本地分支及追踪的分支，可能本地分支并没有追踪远程分支
git branch --set-upstream-to=<远程主机名>/<远程分支名> <本地分支名>  //使用此种方式可以在本地分支已经追踪了某个远程分支的情况下，修改追踪的远程分支
git pull origin 远程分支名称:本地分支名称     //从远程仓库pull（拉取）代码到本地分支；origin是远程仓库连接默认的对象名称,[远程分支名称],[本地分支名称]如果不填，默认都填写本地分支

---------------------------------------------------------------------------
从远程仓库同步仓库到本地
情况一 拉取没有权限仓库的代码项目，只用clone,走的是https方式
git clone https://github.com/ligh80/makefiletest.git //例如这样，后面是这个仓库的http的链接

情况二 拉取有修改权限仓库的代码项目，可以用pull(fetch+merge)和push
git clone https://github.com/ligh80/makefiletest.git    //如果本地是空仓库，推荐用clone，将github的仓库直接拉下来，之后再用pull和push
git remote add origin “git@github.com:ligh80/makefiletest.git”    //origin 远程版本库的代称，一般默认是origin， 可以改
git remote -v   //查看远程库信息，一个远程库对应两条信息，（fatch）信息和（push）信息
git fetch --all   //根据已连接的远程仓库，将远程主机的最新内容拉到本地

合并操作步骤（原来本地有文件）：
git add . //将所有文件信息增加到暂存区，保存着本地的commit状态
git reset --hard origin/master   //强制将远程服务器分支更新覆盖至HEAD，此时HEAD是存储着当前working directory所处服务器最新的commit（在不考虑本地代码修改的情况下使用）
git add/rm <文件>...    //更新要提交的内容,对象是本地commit状态
git checkout -- <文件>...  //丢弃工作区的改动，对象是本地工作区文件

git pull [远程服务器] [远程分支名]:[本地分支名]  //相当于git fetch 和 git merge，并不会把所有文件更新（本地已经修改的文件不会更新），只会更新服务器上修改过的其他文件

---------------------------------------------------------------------------
从本地仓库同步到远程仓库
git remote add origin “git@github.com:ligh80/makefiletest.git”    //origin 远程版本库的代称，一般默认是origin， 可以改
git remote -v   //查看远程库信息，一个远程库对应两条信息，（fatch）信息和（push）信息

git add .   //添加当前目录下的所有文件到暂存区，可以是添加一个或多个文件到暂存区:git add [file1] [file2] ...
git rm ./obj/c1.o   //删除本地文件，同时也删除暂存区该文件
git status  //命令用于查看项目的当前状态
git commit -m '提交日志'    //进行提交，提交的时候应该注明提交日志, 描述改动的详细内容，现在临时区域里的文件合并到了本地仓库，可以不要-m参数
git push [远程服务器] [本地分支名]:[远程分支名]    //把本地仓库提交到远端

---------------------------------------------------------------------------
回滚代码
情况一  从暂存区回滚
git checkout gitguide.txt   //从暂存区回复该文件

情况二 从版本库回滚
如果需要删除的 commit 是最新的，那么可以通过 git reset 命令将代码回滚到之前某次提交的状态，但一定要将现有的代码做好备份，否则回滚之后这些变动都会消失。具体操作如下：
git log // 查询要回滚的 commit_id
git reset --hard [commit_id] // 版本库指向id所指的库。加参数-hard，本地文件也会同步；如果不加，本地文件也会不会同步
git reset HEAD  //回滚到当前指向的版本库
git reset HEAD src/mode/hello.java  //对某一个文件进行撤删

--------------------------------------------------------------------------------
比较分支区别
git diff <branch 1> < branch 2>  //branch 1（变动前） 与 branch 2（变动后）

